<?php

/**
 * @file
 * Wistia field module adds a field for Wistia videos.
 */

define('FIELD_WISTIA_DEFAULT_GETEMBED_URL', 'http://get-embed.wistia.com/oembed.json');
define('FIELD_WISTIA_DEFAULT_API_URL', 'https://api.wistia.com/v1/');
define('FIELD_WISTIA_DEFAULT_OEMBED_URL', 'http://fast.wistia.com/oembed');
define('FIELD_WISTIA_PUBLIC_EMBED_URL', 'http://fast.wistia.net/embed/medias/');

require_once dirname(__FILE__) . '/field_wistia.inc';

/**
 * Implements hook_menu().
 */
function field_wistia_menu() {
  $items['admin/config/media/field-wistia'] = array(
    'title' => 'Wistia Field Settings',
    'description' => 'Configure sitewide settings for embedded Wistia video fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_wistia_settings_form'),
    'access arguments' => array('administer field wistia'),
    'file' => 'field_wistia.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function field_wistia_field_permission() {
  return array(
    'administer field wistia' => array(
      'title' => t('Administer Wistia field'),
      'description' => t('Set default configurations for Wistia field settings.'),
    ),
  );
}

/**
 * Implements hook_field_info().
 *
 * Names the field that this module will create.
 */
function field_wistia_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_wistia' => array(
      'label' => t('Wistia Video'),
      'description' => t('A video hosted on Wistia.'),
      'default_widget' => 'field_wistia',
      'default_formatter' => 'field_wistia_video',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function field_wistia_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['input'])) {

      $video_id = field_wistia_get_video_id($item['input']);

      if (!$video_id) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_wistia_invalid',
          'message' => t('Please provide a valid Wistia URL.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function field_wistia_field_is_empty($item, $field) {
  return empty($item['input']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * This tells Drupal what fields it applies to and what
 * settings are available. This is important, if you miss
 * something like embed, then it doesn't get passed on to theme.inc.
 */
function field_wistia_field_formatter_info() {
  $formatters = array(
    // This formatter displays a wistia video.
    'field_wistia_video' => array(
      'label' => t('Wistia Video'),
      'field types' => array('field_wistia'),
      'settings' => array(
        'field_wistia_size' => '640x360',
        'field_wistia_width' => NULL,
        'field_wistia_height' => NULL,
        'field_wistia_autoplay' => FALSE,
        'field_wistia_embed' => FALSE,
        'field_wistia_videofoam' => FALSE,
        'field_wistia_ssl' => FALSE,
        'field_wistia_plugin' => FALSE,
      ),
    ),
    // This formatter just displays a thumbnail for your video.
    'field_wistia_thumbnail' => array(
      'label' => t('Wistia Thumbnail'),
      'field types' => array('field_wistia'),
      'settings' => array(
        'image_style' => 'thumbnail',
        'image_link' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Here we'll tell Drupal how to generate the form that collects the options.
 */
function field_wistia_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'field_wistia_video') {
    $element['field_wistia_size'] = array(
      '#type' => 'select',
      '#title' => t('Wistia video size'),
      '#options' => field_wistia_size_options(),
      '#default_value' => $settings['field_wistia_size'],
    );
    $element['field_wistia_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#size' => 10,
      '#default_value' => $settings['field_wistia_width'],
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][field_wistia_size]"]' => array('value' => 'custom'),
        ),
      ),
    );
    $element['field_wistia_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#size' => 10,
      '#default_value' => $settings['field_wistia_height'],
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][field_wistia_size]"]' => array('value' => 'custom'),
        ),
      ),
    );
    $element['field_wistia_autoplay'] = array(
      '#type' => 'checkbox',
      '#title' => t('Play video automatically when loaded (Autoplay).'),
      '#default_value' => $settings['field_wistia_autoplay'],
    );
    $element['field_wistia_videofoam'] = array(
      '#type' => 'checkbox',
      '#title' => t('VideoFoam allows the player to scale with the browser window.'),
      '#default_value' => $settings['field_wistia_videofoam'],
    );
    $element['field_wistia_embed'] = array(
      '#title' => t('Embed Type'),
      '#type' => 'select',
      '#options' => array(
        'iframe' => t('iFrame'),
        'api' => t('API'),
        'seo' => t('SEO'),
      ),
      '#default_value' => $settings['field_wistia_embed'],
    );
    $element['field_wistia_plugin'] = array(
      '#type' => 'checkbox',
      '#title' => t('Plugin to allow social bar'),
      '#default_value' => $settings['field_wistia_plugin'],
    );
  }

  // Thumbnail type.
  if ($display['type'] == 'field_wistia_thumbnail') {
    $element['image_style'] = array(
      '#type' => 'select',
      '#title' => t('Image style'),
      '#options' => image_style_options(FALSE),
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
    );

    $link_types = array(
      'content' => t('Content'),
    );
    $element['image_link'] = array(
      '#title' => t('Link image to'),
      '#type' => 'select',
      '#default_value' => $settings['image_link'],
      '#empty_option' => t('Nothing'),
      '#options' => $link_types,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * This displays the chosen settings on the 'Manage Display' page.
 */
function field_wistia_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Summary for the video style.
  $parameters = array(
    !empty($settings['field_wistia_embed']) ? $settings['field_wistia_embed'] : FALSE,
    !empty($settings['field_wistia_autoplay']) ? $settings['field_wistia_autoplay'] : FALSE,
    !empty($settings['field_wistia_videofoam']) ? $settings['field_wistia_videofoam'] : FALSE,
    !empty($settings['field_wistia_ssl']) ? $settings['field_wistia_ssl'] : FALSE,
    !empty($settings['field_wistia_plugin']) ? $settings['field_wistia_plugin'] : FALSE,
  );

  // Summary for the video style.
  if ($display['type'] == 'field_wistia_video') {
    $video_sizes = field_wistia_size_options();
    if (isset($video_sizes[$settings['field_wistia_size']])) {
      $summary = t('Wistia video: @size', array('@size' => $video_sizes[$settings['field_wistia_size']]));
    }
    else {
      $summary = t('Wistia video: 640px by 360px');
    }
    foreach ($parameters as $parameter) {
      if ($parameter) {
        $summary .= t(', custom parameters');
        break;
      }
    }
    return $summary;
  }

  // Summary for the thumbnail style.
  if ($display['type'] == 'field_wistia_thumbnail') {
    $summary = array();

    $image_styles = image_style_options(FALSE);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }

    $link_types = array(
      'content' => t('Linked to content'),
      'file' => t('Linked to file'),
    );
    // Display this setting only if image is linked.
    if (isset($link_types[$settings['image_link']])) {
      $summary[] = $link_types[$settings['image_link']];
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_view().
 *
 * This is the hook where we actually do the formatting.
 */
function field_wistia_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter generates the wistia embed.
    case 'field_wistia_video':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          // Setting the theme hook name, gets used as THEME_field_wistia_video.
          // To add the actual markup.
          '#theme' => 'field_wistia_video',
          '#video_id' => $item['video_id'],
          '#size' => array_key_exists('field_wistia_size', $display['settings']) ? $display['settings']['field_wistia_size'] : NULL,
          '#width' => array_key_exists('field_wistia_width', $display['settings']) ? $display['settings']['field_wistia_width'] : NULL,
          '#height' => array_key_exists('field_wistia_height', $display['settings']) ? $display['settings']['field_wistia_height'] : NULL,
          '#embed' => array_key_exists('field_wistia_embed', $display['settings']) ? $display['settings']['field_wistia_embed'] : FALSE,
          '#autoplay' => array_key_exists('field_wistia_autoplay', $display['settings']) ? $display['settings']['field_wistia_autoplay'] : FALSE,
          '#videofoam' => array_key_exists('field_wistia_videofoam', $display['settings']) ? $display['settings']['field_wistia_videofoam'] : FALSE,
          '#ssl' => array_key_exists('field_wistia_ssl', $display['settings']) ? $display['settings']['field_wistia_ssl'] : FALSE,
          '#plugin' => array_key_exists('field_wistia_plugin', $display['settings']) ? $display['settings']['field_wistia_plugin'] : FALSE,
        );
      }
      break;

    // This formatter uses an imagecache preset to generate a thumbnail.
    case 'field_wistia_thumbnail':
      // Check if the formatter involves a link.
      if ($display['settings']['image_link'] == 'content') {
        $uri = entity_uri($entity_type, $entity);
      }

      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'field_wistia_thumbnail',
          '#video_id' => $item['video_id'],
          '#image_style' => $display['settings']['image_style'],
          '#path' => isset($uri) ? $uri : '',
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function field_wistia_field_widget_info() {
  return array(
    'field_wistia' => array(
      'label' => t('Field Wistia'),
      'field types' => array('field_wistia'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Shows up on node form as the field widget that is getting filled out.
 */
function field_wistia_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['input']) ? $items[$delta]['input'] : '';

  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
    '#size' => 60,
    '#maxlength' => 1024,
    '#element_validate' => array('field_wistia_input_validate'),
    // '#value_callback' => 'field_wistia_widget_value',
  );

  // Add our own description if one is not provided by the UI.
  // I.e. somone doens't make their own.
  if ($element['#description'] == '') {
    $element['#description'] = t('Enter the Wistia URL. Valid URL formats include: http://www.wistia.com/medias/g5pnf59ala');
  }
  $return = array('input' => $element);

  // Shows up below the field on node edit page if no custom message set.
  if (isset($items[$delta]['video_id'])) {
    $video_id_element = array(
      '#markup' => '<div class="wistia-video-id">' . t('Wistia video ID: @vid', array('@vid' => $items[$delta]['video_id'])) . '</div>',
    );
    $return['video_id'] = $video_id_element;
  }

  return $return;
}

/**
 * Validation for the Wistia field itself.
 */
function field_wistia_input_validate($element, &$form_state, $form) {
  $input = $element['#value'];

  $video_id = field_wistia_get_video_id($input);

  if ($video_id) {
    $video_id_element = array(
      '#parents' => $element['#parents'],
    );
    array_pop($video_id_element['#parents']);
    $video_id_element['#parents'][] = 'video_id';
    form_set_value($video_id_element, $video_id, $form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 *
 * Tells Drupal how to handle errors detected in hook_field_widget_error()
 */
function field_wistia_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_wistia_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_theme().
 *
 * Also important to have all the damn variables in here or they
 * don't get passed to theme.
 */
function field_wistia_theme($existing, $type, $theme, $path) {
  return array(
    'field_wistia_video' => array(
      'variables' => array(
        'video_id' => NULL,
        'size' => NULL,
        'width' => NULL,
        'height' => NULL,
        'embed' => FALSE,
        'plugin' => FALSE,
        'autoplay' => FALSE,
        'videofoam' => FALSE,
        'ssl' => FALSE,
      ),
      'file' => 'field_wistia.theme.inc',
    ),
    'field_wistia_thumbnail' => array(
      'variables' => array(
        'video_id' => NULL,
        'image_style' => NULL,
        'path' => NULL,
      ),
      'file' => 'field_wistia.theme.inc',
    ),
  );
}
